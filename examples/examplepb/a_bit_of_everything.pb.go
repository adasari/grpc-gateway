// Code generated by protoc-gen-go.
// source: examples/examplepb/a_bit_of_everything.proto
// DO NOT EDIT!

package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import gengo_grpc_gateway_examples_sub "github.com/gengo/grpc-gateway/examples/sub"
import sub2 "github.com/gengo/grpc-gateway/examples/sub2"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NumericEnum int32

const (
	NumericEnum_ZERO NumericEnum = 0
	NumericEnum_ONE  NumericEnum = 1
)

var NumericEnum_name = map[int32]string{
	0: "ZERO",
	1: "ONE",
}
var NumericEnum_value = map[string]int32{
	"ZERO": 0,
	"ONE":  1,
}

func (x NumericEnum) String() string {
	return proto.EnumName(NumericEnum_name, int32(x))
}
func (NumericEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ABitOfEverything_Nested_DeepEnum int32

const (
	ABitOfEverything_Nested_FALSE ABitOfEverything_Nested_DeepEnum = 0
	ABitOfEverything_Nested_TRUE  ABitOfEverything_Nested_DeepEnum = 1
)

var ABitOfEverything_Nested_DeepEnum_name = map[int32]string{
	0: "FALSE",
	1: "TRUE",
}
var ABitOfEverything_Nested_DeepEnum_value = map[string]int32{
	"FALSE": 0,
	"TRUE":  1,
}

func (x ABitOfEverything_Nested_DeepEnum) String() string {
	return proto.EnumName(ABitOfEverything_Nested_DeepEnum_name, int32(x))
}
func (ABitOfEverything_Nested_DeepEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 0, 0}
}

type ABitOfEverything struct {
	Uuid         string                     `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Nested       []*ABitOfEverything_Nested `protobuf:"bytes,2,rep,name=nested" json:"nested,omitempty"`
	FloatValue   float32                    `protobuf:"fixed32,3,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	DoubleValue  float64                    `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	Int64Value   int64                      `protobuf:"varint,5,opt,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Uint64Value  uint64                     `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value" json:"uint64_value,omitempty"`
	Int32Value   int32                      `protobuf:"varint,7,opt,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Fixed64Value uint64                     `protobuf:"fixed64,8,opt,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	Fixed32Value uint32                     `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value" json:"fixed32_value,omitempty"`
	BoolValue    bool                       `protobuf:"varint,10,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue  string                     `protobuf:"bytes,11,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	// TODO(yugui) add bytes_value
	Uint32Value         uint32      `protobuf:"varint,13,opt,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	EnumValue           NumericEnum `protobuf:"varint,14,opt,name=enum_value,json=enumValue,enum=gengo.grpc.gateway.examples.examplepb.NumericEnum" json:"enum_value,omitempty"`
	Sfixed32Value       int32       `protobuf:"fixed32,15,opt,name=sfixed32_value,json=sfixed32Value" json:"sfixed32_value,omitempty"`
	Sfixed64Value       int64       `protobuf:"fixed64,16,opt,name=sfixed64_value,json=sfixed64Value" json:"sfixed64_value,omitempty"`
	Sint32Value         int32       `protobuf:"zigzag32,17,opt,name=sint32_value,json=sint32Value" json:"sint32_value,omitempty"`
	Sint64Value         int64       `protobuf:"zigzag64,18,opt,name=sint64_value,json=sint64Value" json:"sint64_value,omitempty"`
	RepeatedStringValue []string    `protobuf:"bytes,19,rep,name=repeated_string_value,json=repeatedStringValue" json:"repeated_string_value,omitempty"`
}

func (m *ABitOfEverything) Reset()                    { *m = ABitOfEverything{} }
func (m *ABitOfEverything) String() string            { return proto.CompactTextString(m) }
func (*ABitOfEverything) ProtoMessage()               {}
func (*ABitOfEverything) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ABitOfEverything) GetNested() []*ABitOfEverything_Nested {
	if m != nil {
		return m.Nested
	}
	return nil
}

type ABitOfEverything_Nested struct {
	Name   string                           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Amount uint32                           `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Ok     ABitOfEverything_Nested_DeepEnum `protobuf:"varint,3,opt,name=ok,enum=gengo.grpc.gateway.examples.examplepb.ABitOfEverything_Nested_DeepEnum" json:"ok,omitempty"`
}

func (m *ABitOfEverything_Nested) Reset()                    { *m = ABitOfEverything_Nested{} }
func (m *ABitOfEverything_Nested) String() string            { return proto.CompactTextString(m) }
func (*ABitOfEverything_Nested) ProtoMessage()               {}
func (*ABitOfEverything_Nested) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*ABitOfEverything)(nil), "gengo.grpc.gateway.examples.examplepb.ABitOfEverything")
	proto.RegisterType((*ABitOfEverything_Nested)(nil), "gengo.grpc.gateway.examples.examplepb.ABitOfEverything.Nested")
	proto.RegisterType((*EmptyMessage)(nil), "gengo.grpc.gateway.examples.examplepb.EmptyMessage")
	proto.RegisterEnum("gengo.grpc.gateway.examples.examplepb.NumericEnum", NumericEnum_name, NumericEnum_value)
	proto.RegisterEnum("gengo.grpc.gateway.examples.examplepb.ABitOfEverything_Nested_DeepEnum", ABitOfEverything_Nested_DeepEnum_name, ABitOfEverything_Nested_DeepEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for ABitOfEverythingService service

type ABitOfEverythingServiceClient interface {
	Create(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error)
	CreateBody(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error)
	BulkCreate(ctx context.Context, opts ...grpc.CallOption) (ABitOfEverythingService_BulkCreateClient, error)
	Lookup(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*ABitOfEverything, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (ABitOfEverythingService_ListClient, error)
	Update(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*EmptyMessage, error)
	Delete(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	Echo(ctx context.Context, in *gengo_grpc_gateway_examples_sub.StringMessage, opts ...grpc.CallOption) (*gengo_grpc_gateway_examples_sub.StringMessage, error)
	BulkEcho(ctx context.Context, opts ...grpc.CallOption) (ABitOfEverythingService_BulkEchoClient, error)
}

type aBitOfEverythingServiceClient struct {
	cc *grpc.ClientConn
}

func NewABitOfEverythingServiceClient(cc *grpc.ClientConn) ABitOfEverythingServiceClient {
	return &aBitOfEverythingServiceClient{cc}
}

func (c *aBitOfEverythingServiceClient) Create(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := grpc.Invoke(ctx, "/gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) CreateBody(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := grpc.Invoke(ctx, "/gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService/CreateBody", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) BulkCreate(ctx context.Context, opts ...grpc.CallOption) (ABitOfEverythingService_BulkCreateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ABitOfEverythingService_serviceDesc.Streams[0], c.cc, "/gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService/BulkCreate", opts...)
	if err != nil {
		return nil, err
	}
	x := &aBitOfEverythingServiceBulkCreateClient{stream}
	return x, nil
}

type ABitOfEverythingService_BulkCreateClient interface {
	Send(*ABitOfEverything) error
	CloseAndRecv() (*EmptyMessage, error)
	grpc.ClientStream
}

type aBitOfEverythingServiceBulkCreateClient struct {
	grpc.ClientStream
}

func (x *aBitOfEverythingServiceBulkCreateClient) Send(m *ABitOfEverything) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aBitOfEverythingServiceBulkCreateClient) CloseAndRecv() (*EmptyMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aBitOfEverythingServiceClient) Lookup(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := grpc.Invoke(ctx, "/gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (ABitOfEverythingService_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ABitOfEverythingService_serviceDesc.Streams[1], c.cc, "/gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &aBitOfEverythingServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ABitOfEverythingService_ListClient interface {
	Recv() (*ABitOfEverything, error)
	grpc.ClientStream
}

type aBitOfEverythingServiceListClient struct {
	grpc.ClientStream
}

func (x *aBitOfEverythingServiceListClient) Recv() (*ABitOfEverything, error) {
	m := new(ABitOfEverything)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aBitOfEverythingServiceClient) Update(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Delete(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Echo(ctx context.Context, in *gengo_grpc_gateway_examples_sub.StringMessage, opts ...grpc.CallOption) (*gengo_grpc_gateway_examples_sub.StringMessage, error) {
	out := new(gengo_grpc_gateway_examples_sub.StringMessage)
	err := grpc.Invoke(ctx, "/gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) BulkEcho(ctx context.Context, opts ...grpc.CallOption) (ABitOfEverythingService_BulkEchoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ABitOfEverythingService_serviceDesc.Streams[2], c.cc, "/gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService/BulkEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &aBitOfEverythingServiceBulkEchoClient{stream}
	return x, nil
}

type ABitOfEverythingService_BulkEchoClient interface {
	Send(*gengo_grpc_gateway_examples_sub.StringMessage) error
	Recv() (*gengo_grpc_gateway_examples_sub.StringMessage, error)
	grpc.ClientStream
}

type aBitOfEverythingServiceBulkEchoClient struct {
	grpc.ClientStream
}

func (x *aBitOfEverythingServiceBulkEchoClient) Send(m *gengo_grpc_gateway_examples_sub.StringMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aBitOfEverythingServiceBulkEchoClient) Recv() (*gengo_grpc_gateway_examples_sub.StringMessage, error) {
	m := new(gengo_grpc_gateway_examples_sub.StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ABitOfEverythingService service

type ABitOfEverythingServiceServer interface {
	Create(context.Context, *ABitOfEverything) (*ABitOfEverything, error)
	CreateBody(context.Context, *ABitOfEverything) (*ABitOfEverything, error)
	BulkCreate(ABitOfEverythingService_BulkCreateServer) error
	Lookup(context.Context, *sub2.IdMessage) (*ABitOfEverything, error)
	List(*EmptyMessage, ABitOfEverythingService_ListServer) error
	Update(context.Context, *ABitOfEverything) (*EmptyMessage, error)
	Delete(context.Context, *sub2.IdMessage) (*EmptyMessage, error)
	Echo(context.Context, *gengo_grpc_gateway_examples_sub.StringMessage) (*gengo_grpc_gateway_examples_sub.StringMessage, error)
	BulkEcho(ABitOfEverythingService_BulkEchoServer) error
}

func RegisterABitOfEverythingServiceServer(s *grpc.Server, srv ABitOfEverythingServiceServer) {
	s.RegisterService(&_ABitOfEverythingService_serviceDesc, srv)
}

func _ABitOfEverythingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ABitOfEverythingServiceServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ABitOfEverythingService_CreateBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ABitOfEverythingServiceServer).CreateBody(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ABitOfEverythingService_BulkCreate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ABitOfEverythingServiceServer).BulkCreate(&aBitOfEverythingServiceBulkCreateServer{stream})
}

type ABitOfEverythingService_BulkCreateServer interface {
	SendAndClose(*EmptyMessage) error
	Recv() (*ABitOfEverything, error)
	grpc.ServerStream
}

type aBitOfEverythingServiceBulkCreateServer struct {
	grpc.ServerStream
}

func (x *aBitOfEverythingServiceBulkCreateServer) SendAndClose(m *EmptyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aBitOfEverythingServiceBulkCreateServer) Recv() (*ABitOfEverything, error) {
	m := new(ABitOfEverything)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ABitOfEverythingService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(sub2.IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ABitOfEverythingServiceServer).Lookup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ABitOfEverythingService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ABitOfEverythingServiceServer).List(m, &aBitOfEverythingServiceListServer{stream})
}

type ABitOfEverythingService_ListServer interface {
	Send(*ABitOfEverything) error
	grpc.ServerStream
}

type aBitOfEverythingServiceListServer struct {
	grpc.ServerStream
}

func (x *aBitOfEverythingServiceListServer) Send(m *ABitOfEverything) error {
	return x.ServerStream.SendMsg(m)
}

func _ABitOfEverythingService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ABitOfEverythingServiceServer).Update(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ABitOfEverythingService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(sub2.IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ABitOfEverythingServiceServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ABitOfEverythingService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(gengo_grpc_gateway_examples_sub.StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ABitOfEverythingServiceServer).Echo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ABitOfEverythingService_BulkEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ABitOfEverythingServiceServer).BulkEcho(&aBitOfEverythingServiceBulkEchoServer{stream})
}

type ABitOfEverythingService_BulkEchoServer interface {
	Send(*gengo_grpc_gateway_examples_sub.StringMessage) error
	Recv() (*gengo_grpc_gateway_examples_sub.StringMessage, error)
	grpc.ServerStream
}

type aBitOfEverythingServiceBulkEchoServer struct {
	grpc.ServerStream
}

func (x *aBitOfEverythingServiceBulkEchoServer) Send(m *gengo_grpc_gateway_examples_sub.StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aBitOfEverythingServiceBulkEchoServer) Recv() (*gengo_grpc_gateway_examples_sub.StringMessage, error) {
	m := new(gengo_grpc_gateway_examples_sub.StringMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ABitOfEverythingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gengo.grpc.gateway.examples.examplepb.ABitOfEverythingService",
	HandlerType: (*ABitOfEverythingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ABitOfEverythingService_Create_Handler,
		},
		{
			MethodName: "CreateBody",
			Handler:    _ABitOfEverythingService_CreateBody_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _ABitOfEverythingService_Lookup_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ABitOfEverythingService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ABitOfEverythingService_Delete_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _ABitOfEverythingService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkCreate",
			Handler:       _ABitOfEverythingService_BulkCreate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _ABitOfEverythingService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkEcho",
			Handler:       _ABitOfEverythingService_BulkEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor1 = []byte{
	// 932 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xc6, 0x49, 0xd6, 0x49, 0xc6, 0x9b, 0x6c, 0x3a, 0x15, 0xb0, 0x04, 0xd0, 0x6e, 0x4d, 0x0b,
	0x21, 0x54, 0x76, 0xeb, 0x20, 0x90, 0x2a, 0x81, 0xd4, 0xd0, 0x80, 0x90, 0x96, 0x5d, 0xe1, 0xa5,
	0x45, 0x8a, 0x84, 0x22, 0x27, 0x9e, 0xb8, 0xd6, 0x3a, 0x1e, 0xcb, 0x3f, 0xa1, 0x51, 0x14, 0x2e,
	0x7a, 0x85, 0xc4, 0x05, 0x12, 0x3c, 0x00, 0x12, 0x77, 0x20, 0xc1, 0x8b, 0xf4, 0x92, 0x57, 0xe0,
	0x41, 0x38, 0x1e, 0xff, 0x74, 0x9c, 0x22, 0x12, 0x52, 0x69, 0x7b, 0x97, 0x99, 0xf3, 0xcd, 0x77,
	0xbe, 0x73, 0xce, 0x37, 0xe3, 0xa0, 0x9b, 0xe4, 0x91, 0x31, 0xf3, 0x1c, 0x12, 0xa8, 0xe9, 0x0f,
	0x6f, 0xac, 0x1a, 0xa3, 0xb1, 0x1d, 0x8e, 0xe8, 0x74, 0x44, 0xe6, 0xc4, 0x5f, 0x84, 0x0f, 0x6d,
	0xd7, 0x52, 0x3c, 0x9f, 0x86, 0x14, 0xdf, 0xb0, 0x88, 0x6b, 0x51, 0xc5, 0xf2, 0xbd, 0x89, 0x62,
	0x19, 0x21, 0xf9, 0xd6, 0x58, 0x28, 0x19, 0x81, 0x92, 0x13, 0xb4, 0xdf, 0xb0, 0x28, 0xb5, 0x1c,
	0xa2, 0x1a, 0x9e, 0xad, 0x1a, 0xae, 0x4b, 0x43, 0x23, 0xb4, 0xa9, 0x1b, 0x24, 0x24, 0xed, 0x76,
	0x9e, 0x32, 0x88, 0xc6, 0xea, 0x8c, 0x04, 0x81, 0x61, 0x91, 0x34, 0xf6, 0x3a, 0x1f, 0xd3, 0x8a,
	0x41, 0xf9, 0xd7, 0x2a, 0x6a, 0xdd, 0xed, 0xdb, 0xe1, 0xd9, 0x74, 0x90, 0x0b, 0xc3, 0x18, 0x55,
	0xa2, 0xc8, 0x36, 0x0f, 0x85, 0x63, 0xa1, 0x53, 0xd7, 0xd9, 0x6f, 0xfc, 0x00, 0x89, 0x2e, 0x09,
	0x42, 0x62, 0x1e, 0x96, 0x8e, 0xcb, 0x1d, 0x49, 0xfb, 0x58, 0xd9, 0x4a, 0xb7, 0xb2, 0x4e, 0xae,
	0x9c, 0x32, 0x16, 0x3d, 0x65, 0xc3, 0x47, 0x48, 0x9a, 0x3a, 0xd4, 0x08, 0x47, 0x73, 0xc3, 0x89,
	0xc8, 0x61, 0x19, 0x52, 0x96, 0x74, 0xc4, 0xb6, 0x1e, 0xc4, 0x3b, 0xf8, 0x1a, 0xda, 0x37, 0x69,
	0x34, 0x76, 0x48, 0x8a, 0xa8, 0x00, 0x42, 0xd0, 0xa5, 0x64, 0x2f, 0x81, 0x00, 0x87, 0xed, 0x86,
	0x1f, 0xbc, 0x9f, 0x22, 0xf6, 0x00, 0x51, 0xd6, 0x11, 0xdb, 0xca, 0x39, 0x22, 0x1e, 0x21, 0x02,
	0xa2, 0xa2, 0x4b, 0x11, 0x07, 0x49, 0x38, 0x7a, 0x5a, 0x8a, 0xa8, 0x02, 0x62, 0x8f, 0x71, 0xf4,
	0xb4, 0x04, 0xf0, 0x16, 0x6a, 0x4c, 0xed, 0x47, 0xc4, 0xcc, 0x49, 0x6a, 0x00, 0x11, 0xf5, 0xfd,
	0x74, 0xb3, 0x08, 0xca, 0x79, 0xea, 0x00, 0xaa, 0xa6, 0xa0, 0x8c, 0xe9, 0x4d, 0x84, 0xc6, 0x94,
	0x3a, 0x29, 0x02, 0x01, 0xa2, 0xa6, 0xd7, 0xe3, 0x9d, 0x5c, 0x6c, 0x10, 0xfa, 0xd0, 0xaa, 0x14,
	0x20, 0xb1, 0x29, 0x48, 0xc9, 0x5e, 0xa1, 0x9e, 0x3c, 0x4b, 0x03, 0x20, 0x8d, 0xa4, 0x9e, 0x2c,
	0xc9, 0x97, 0x08, 0x11, 0x37, 0x9a, 0xa5, 0x80, 0x26, 0x00, 0x9a, 0x9a, 0xb6, 0xe5, 0xcc, 0x4e,
	0xa3, 0x19, 0xf1, 0xed, 0xc9, 0x00, 0xce, 0xeb, 0xf5, 0x98, 0x25, 0xa1, 0xbc, 0x81, 0x9a, 0x41,
	0xb1, 0xba, 0x03, 0xa0, 0x3d, 0xd0, 0x1b, 0x41, 0xa1, 0xbc, 0x1c, 0x96, 0x77, 0xaa, 0x05, 0xb0,
	0x56, 0x06, 0xe3, 0x66, 0x12, 0xf0, 0x35, 0x5c, 0x01, 0xd0, 0x15, 0x28, 0x93, 0xab, 0x21, 0x85,
	0xe4, 0x3c, 0x18, 0x20, 0x38, 0x81, 0x64, 0x2c, 0x1a, 0x7a, 0xd9, 0x27, 0x1e, 0x81, 0x5a, 0xcc,
	0x51, 0xa1, 0x6b, 0x57, 0xc1, 0xa5, 0x75, 0xfd, 0x6a, 0x16, 0x3c, 0x7f, 0xda, 0xbd, 0xf6, 0x9f,
	0x02, 0x12, 0x13, 0x17, 0xc6, 0x4e, 0x77, 0x8d, 0x19, 0xc9, 0x9c, 0x1e, 0xff, 0xc6, 0xaf, 0x20,
	0xd1, 0x98, 0xd1, 0xc8, 0x0d, 0xc1, 0xe9, 0x71, 0x5b, 0xd3, 0x15, 0xfe, 0x1a, 0x95, 0xe8, 0x05,
	0x33, 0x68, 0x53, 0xfb, 0xec, 0xf9, 0xdc, 0xaf, 0xdc, 0x23, 0xc4, 0x63, 0xed, 0x05, 0x4a, 0xf9,
	0x08, 0xd5, 0xb2, 0x35, 0xae, 0xa3, 0xbd, 0x4f, 0xef, 0x9e, 0x9c, 0x0f, 0x5a, 0x2f, 0xe1, 0x1a,
	0xaa, 0x7c, 0xa5, 0xdf, 0x1f, 0xb4, 0x04, 0xb9, 0x89, 0xf6, 0x07, 0x33, 0x2f, 0x5c, 0x7c, 0x91,
	0x5c, 0xdd, 0xee, 0x31, 0x92, 0xb8, 0x11, 0xc5, 0xc0, 0xe1, 0x40, 0x3f, 0x83, 0x23, 0x55, 0x54,
	0x3e, 0x3b, 0x85, 0x13, 0xda, 0x93, 0x06, 0x7a, 0x75, 0x3d, 0xf7, 0x39, 0xf1, 0xe7, 0xf6, 0x84,
	0xe0, 0x1f, 0xcb, 0x48, 0xfc, 0xc4, 0x8f, 0xbb, 0x82, 0x3f, 0xdc, 0xb1, 0x8c, 0xf6, 0xae, 0x07,
	0xe5, 0x9f, 0x4a, 0x8f, 0xff, 0xfa, 0xfb, 0xe7, 0xd2, 0x0f, 0x25, 0xf9, 0xfb, 0x92, 0x3a, 0xbf,
	0x9d, 0xbd, 0x90, 0xff, 0xf6, 0x3e, 0xaa, 0x4b, 0xee, 0x61, 0x58, 0xa9, 0x4b, 0xfe, 0x15, 0x80,
	0x25, 0x67, 0x8c, 0x95, 0x1a, 0x10, 0xcf, 0xf0, 0x8d, 0x90, 0xfa, 0xea, 0x32, 0x2a, 0x04, 0x96,
	0x9c, 0xc5, 0x60, 0x55, 0xf0, 0x65, 0xb6, 0xe6, 0xe2, 0x4f, 0xef, 0x25, 0x2c, 0x78, 0x3f, 0x7d,
	0x04, 0x0b, 0xcf, 0x27, 0x80, 0x57, 0xbb, 0xab, 0x24, 0x09, 0x77, 0x2c, 0x58, 0xe7, 0x09, 0xd6,
	0x13, 0x05, 0x6b, 0x07, 0x78, 0x91, 0xf8, 0x77, 0x01, 0xa1, 0x64, 0x22, 0x7d, 0x6a, 0x2e, 0x5e,
	0xc0, 0x54, 0xba, 0x6c, 0x28, 0xd7, 0xe5, 0xa3, 0x0d, 0x23, 0xb9, 0x23, 0x74, 0xf1, 0x1f, 0x20,
	0xb6, 0x1f, 0x39, 0x17, 0xcf, 0x6b, 0xa1, 0xde, 0x96, 0x07, 0x79, 0xe7, 0xcb, 0x2a, 0x13, 0xfa,
	0xae, 0x7c, 0x7d, 0x93, 0x77, 0xc6, 0xa0, 0x10, 0xd4, 0x76, 0x04, 0xfc, 0x18, 0x6e, 0xfb, 0x09,
	0xa5, 0x17, 0x91, 0x87, 0x0f, 0x94, 0xf8, 0x0b, 0xa8, 0x7c, 0x6e, 0xa6, 0x74, 0xbb, 0x37, 0x4c,
	0x61, 0x3a, 0x3a, 0xf8, 0xed, 0x8d, 0x1e, 0x8e, 0x3f, 0x9e, 0x2b, 0xfc, 0x8b, 0x80, 0x2a, 0x27,
	0x76, 0x10, 0xe2, 0x5d, 0xaa, 0xde, 0x5d, 0xe6, 0x3b, 0x4c, 0xe6, 0x35, 0xbc, 0x69, 0xae, 0xb7,
	0x04, 0xfc, 0x1b, 0xb4, 0xe9, 0xbe, 0x67, 0x5e, 0xfe, 0x48, 0x6f, 0x33, 0x8d, 0xef, 0xb5, 0xb7,
	0x6c, 0x65, 0x6c, 0xc1, 0xef, 0x90, 0x78, 0x8f, 0x38, 0x04, 0xa4, 0x3e, 0x33, 0xd1, 0x9d, 0x24,
	0xa4, 0xd3, 0xec, 0x6e, 0x3b, 0xcd, 0x27, 0x30, 0xcd, 0xc1, 0xe4, 0x21, 0xc5, 0xca, 0x7f, 0x66,
	0x03, 0x69, 0x4a, 0xf2, 0xdd, 0xc9, 0xd4, 0xfd, 0x4f, 0xbc, 0x3c, 0x61, 0xc2, 0xbe, 0xc1, 0x37,
	0x37, 0x09, 0x23, 0xa0, 0x46, 0x5d, 0x26, 0xcf, 0xc9, 0xf0, 0x35, 0xb9, 0xa5, 0xce, 0xb5, 0x1c,
	0x1f, 0xc7, 0xee, 0xec, 0xb1, 0xd8, 0x10, 0xe3, 0x67, 0x42, 0xb1, 0x37, 0x6b, 0xf1, 0x85, 0xbe,
	0x94, 0x8a, 0xb6, 0xbe, 0xc0, 0x4c, 0x75, 0x7c, 0x81, 0x6f, 0x09, 0x7d, 0x69, 0x58, 0xcf, 0x27,
	0x37, 0x16, 0xd9, 0x1f, 0xd7, 0xde, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x17, 0x44, 0xcc, 0x34,
	0x66, 0x0b, 0x00, 0x00,
}
